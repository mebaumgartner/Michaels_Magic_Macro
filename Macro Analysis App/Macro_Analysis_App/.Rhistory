print (name)
table = read.csv("whole disc analysis-- 12_5_19_gstGFP_rpS3Hhg4_Xrp1RNAi_antip62_555.lif - Series026.tif_1.csv", check.names=FALSE)
headers = list(colnames(table))
library(stringr)
name <- str_extract_all(headers, "\\<[^<>]+\\>")[[1]]
print (name)
name <- str_extract_all(headers, "\\<[^<>]+\\>")[[1]]
print (name)
print (name)
install.packages("stringr")
print (name)
library(stringr)
table = read.csv("whole disc analysis-- 12_5_19_gstGFP_rpS3Hhg4_Xrp1RNAi_antip62_555.lif - Series026.tif_1.csv", check.names=FALSE)
headers = list(colnames(table))
library(stringr)
name <- str_extract_all(headers, "\\<[^<>]+\\>")[[1]]
print (name)
table = read.csv("whole disc analysis-- 12_5_19_gstGFP_rpS3Hhg4_Xrp1RNAi_antip62_555.lif - Series026.tif_1.csv", check.names=FALSE)
headers = list(colnames(table))
library(stringr)
name <- str_extract_all(headers, "\\<[^<>]+\\>")[[1]]
name <- str_extract_all(name, "\\<[^<>]+\\_")[[1]]
print (name)
table = read.csv("whole disc analysis-- 12_5_19_gstGFP_rpS3Hhg4_Xrp1RNAi_antip62_555.lif - Series026.tif_1.csv", check.names=FALSE)
headers = list(colnames(table))
library(stringr)
name <- str_extract_all(headers, "\\<[^<>]+\\>")[[1]]
name <- str_extract_all(name, "\\<[^<>]+\\_")[[1]]
name <- gsub("<|_", "", name)
print (name)
table = read.csv("whole disc analysis-- 12_5_19_gstGFP_rpS3Hhg4_Xrp1RNAi_antip62_555.lif - Series026.tif_1.csv", check.names=FALSE)
headers = list(colnames(table))
library(stringr)
name <- str_extract_all(headers, "\\<[^<>]+\\>")[[1]]
name <- str_extract_all(name, "\\<[^<>]+\\_")[[1]]
name <- gsub("<|_", "", name)
print (name)
#Check for the number of genotypes
baseString <- "Genotype"
count <- 1
breakLoop <- FALSE
while (breakLoop == FALSE){
for (i in headers){
breakLoop <- TRUE
breaker <- FALSE
queryString <- paste(baseString, toString(count), sep="_")
count <- count + 1
isGenotypeNum <- grepl(queryString, i, fixed = TRUE)
for (z in isGenotypeNum){ if (z == TRUE){ breaker = TRUE } }
if (breaker == TRUE){breakLoop <- FALSE}
}
}
count <- count - 2
#Get only the columns that are not genotype specific
staticVals <- table[ , !grepl( "Genotype" , names( table) ) ]
#Loop through, get all the columns corresponding to one genotype, and store them in an array
chal <- 1
genotypeNames <- c()
while(chal <= count){
queryString1 <- paste(baseString, toString(chal), sep="_")
queryString2 <- paste(baseString, toString(chal), sep=":")
queryString <- paste(queryString1, queryString2, sep="|")
genotypeVals <- table[ , grepl( queryString , names( table) ) ]
genotypeVals <- cbind(staticVals, genotypeVals)
name <- str_extract_all(headers, "\\<[^<>]+\\>")[[1]]
name <- str_extract_all(name, "\\<[^<>]+\\_")[[1]]
name <- gsub("<|_", "", name)
genotypeNames <- c(genotypeName, name)
headers <- colnames(genotypeVals)
headers <- gsub(queryString1, "", headers, ignore.case = FALSE, fixed = TRUE)
headers <- gsub("<[^>]+>", "", headers)
headers <- gsub(" ", ".", headers)
headers <- gsub("#", "X.", headers)
print (headers)
chal <- chal+1
}
print (genotypeNames)
table = read.csv("whole disc analysis-- 12_5_19_gstGFP_rpS3Hhg4_Xrp1RNAi_antip62_555.lif - Series026.tif_1.csv", check.names=FALSE)
headers = list(colnames(table))
#Check for the number of genotypes
baseString <- "Genotype"
count <- 1
breakLoop <- FALSE
while (breakLoop == FALSE){
for (i in headers){
breakLoop <- TRUE
breaker <- FALSE
queryString <- paste(baseString, toString(count), sep="_")
count <- count + 1
isGenotypeNum <- grepl(queryString, i, fixed = TRUE)
for (z in isGenotypeNum){ if (z == TRUE){ breaker = TRUE } }
if (breaker == TRUE){breakLoop <- FALSE}
}
}
count <- count - 2
#Get only the columns that are not genotype specific
staticVals <- table[ , !grepl( "Genotype" , names( table) ) ]
#Loop through, get all the columns corresponding to one genotype, and store them in an array
chal <- 1
genotypeNames <- c()
while(chal <= count){
queryString1 <- paste(baseString, toString(chal), sep="_")
queryString2 <- paste(baseString, toString(chal), sep=":")
queryString <- paste(queryString1, queryString2, sep="|")
genotypeVals <- table[ , grepl( queryString , names( table) ) ]
genotypeVals <- cbind(staticVals, genotypeVals)
name <- str_extract_all(headers, "\\<[^<>]+\\>")[[1]]
name <- str_extract_all(name, "\\<[^<>]+\\_")[[1]]
name <- gsub("<|_", "", name)
genotypeNames <- c(genotypeName, name)
headers <- colnames(genotypeVals)
headers <- gsub(queryString1, "", headers, ignore.case = FALSE, fixed = TRUE)
headers <- gsub("<[^>]+>", "", headers)
headers <- gsub(" ", ".", headers)
headers <- gsub("#", "X.", headers)
print (headers)
chal <- chal+1
}
print (genotypeNames)
table = read.csv("whole disc analysis-- 12_5_19_gstGFP_rpS3Hhg4_Xrp1RNAi_antip62_555.lif - Series026.tif_1.csv", check.names=FALSE)
headers = list(colnames(table))
#Check for the number of genotypes
baseString <- "Genotype"
count <- 1
breakLoop <- FALSE
while (breakLoop == FALSE){
for (i in headers){
breakLoop <- TRUE
breaker <- FALSE
queryString <- paste(baseString, toString(count), sep="_")
count <- count + 1
isGenotypeNum <- grepl(queryString, i, fixed = TRUE)
for (z in isGenotypeNum){ if (z == TRUE){ breaker = TRUE } }
if (breaker == TRUE){breakLoop <- FALSE}
}
}
count <- count - 2
#Get only the columns that are not genotype specific
staticVals <- table[ , !grepl( "Genotype" , names( table) ) ]
#Loop through, get all the columns corresponding to one genotype, and store them in an array
chal <- 1
genotypeNames <- c()
while(chal <= count){
queryString1 <- paste(baseString, toString(chal), sep="_")
queryString2 <- paste(baseString, toString(chal), sep=":")
queryString <- paste(queryString1, queryString2, sep="|")
genotypeVals <- table[ , grepl( queryString , names( table) ) ]
genotypeVals <- cbind(staticVals, genotypeVals)
name <- str_extract_all(headers, "\\<[^<>]+\\>")[[1]]
name <- str_extract_all(name, "\\<[^<>]+\\_")[[1]]
name <- gsub("<|_", "", name)
genotypeNames <- c(genotypeName, name)
headers <- colnames(genotypeVals)
headers <- gsub(queryString1, "", headers, ignore.case = FALSE, fixed = TRUE)
headers <- gsub("<[^>]+>", "", headers)
headers <- gsub(" ", ".", headers)
headers <- gsub("#", "X.", headers)
print (headers)
chal <- chal+1
}
print (genotypeVals)
print (genotypeNames)
table = read.csv("whole disc analysis-- 12_5_19_gstGFP_rpS3Hhg4_Xrp1RNAi_antip62_555.lif - Series026.tif_1.csv", check.names=FALSE)
headers = list(colnames(table))
#Check for the number of genotypes
baseString <- "Genotype"
count <- 1
breakLoop <- FALSE
while (breakLoop == FALSE){
for (i in headers){
breakLoop <- TRUE
breaker <- FALSE
queryString <- paste(baseString, toString(count), sep="_")
count <- count + 1
isGenotypeNum <- grepl(queryString, i, fixed = TRUE)
for (z in isGenotypeNum){ if (z == TRUE){ breaker = TRUE } }
if (breaker == TRUE){breakLoop <- FALSE}
}
}
count <- count - 2
#Get only the columns that are not genotype specific
staticVals <- table[ , !grepl( "Genotype" , names( table) ) ]
#Loop through, get all the columns corresponding to one genotype, and store them in an array
chal <- 1
genotypeNames <- c()
while(chal <= count){
queryString1 <- paste(baseString, toString(chal), sep="_")
queryString2 <- paste(baseString, toString(chal), sep=":")
queryString <- paste(queryString1, queryString2, sep="|")
genotypeVals <- table[ , grepl( queryString , names( table) ) ]
genotypeVals <- cbind(staticVals, genotypeVals)
headers <- colnames(genotypeVals)
name <- str_extract_all(headers, "\\<[^<>]+\\>")[[1]]
name <- str_extract_all(name, "\\<[^<>]+\\_")[[1]]
name <- gsub("<|_", "", name)
genotypeNames <- c(genotypeName, name)
headers <- colnames(genotypeVals)
headers <- gsub(queryString1, "", headers, ignore.case = FALSE, fixed = TRUE)
headers <- gsub("<[^>]+>", "", headers)
headers <- gsub(" ", ".", headers)
headers <- gsub("#", "X.", headers)
print (headers)
chal <- chal+1
}
print(name)
print (genotypeNames)
headers <- colnames(genotypeVals)
headers
name <- str_extract_all(headers, "\\<[^<>]+\\>")[[1]]
name
table = read.csv("whole disc analysis-- 12_5_19_gstGFP_rpS3Hhg4_Xrp1RNAi_antip62_555.lif - Series026.tif_1.csv", check.names=FALSE)
headers = list(colnames(table))
name <- str_extract_all(headers, "\\<[^<>]+\\>")[[1]]
name <- str_extract_all(name, "\\<[^<>]+\\_")[[1]]
name <- gsub("<|_", "", name)
print (name)
table = read.csv("whole disc analysis-- 12_5_19_gstGFP_rpS3Hhg4_Xrp1RNAi_antip62_555.lif - Series026.tif_1.csv", check.names=FALSE)
headers = list(colnames(table))
library(stringr)
name <- str_extract_all(headers, "\\<[^<>]+\\>")[[1]]
name <- str_extract_all(name, "\\<[^<>]+\\_")[[1]]
name <- gsub("<|_", "", name)
print (name)
table = read.csv("whole disc analysis-- 12_5_19_gstGFP_rpS3Hhg4_Xrp1RNAi_antip62_555.lif - Series026.tif_1.csv", check.names=FALSE)
headers = list(colnames(table))
library(stringr)
name <- str_extract_all(headers, "\\<[^<>]+\\>")[[1]]
name <- str_extract_all(name, "\\<[^<>]+\\_")
name <- gsub("<|_", "", name)
print (name)
table = read.csv("whole disc analysis-- 12_5_19_gstGFP_rpS3Hhg4_Xrp1RNAi_antip62_555.lif - Series026.tif_1.csv", check.names=FALSE)
headers = list(colnames(table))
library(stringr)
name <- str_extract_all(headers, "\\<[^<>]+\\>")[[1]]
name <- str_extract_all(name, "\\<[^<>]+\\_")
name <- gsub("<|_", "", name)
print (name)
table = read.csv("whole disc analysis-- 12_5_19_gstGFP_rpS3Hhg4_Xrp1RNAi_antip62_555.lif - Series026.tif_1.csv", check.names=FALSE)
headers = list(colnames(table))
library(stringr)
name <- str_extract_all(headers, "\\<[^<>]+\\>")[[1]]
name <- str_extract_all(name, "\\<[^<>]+\\_")
name <- gsub("<|_", "", name)
genotypeNames <- unique(name)
print (name)
table = read.csv("whole disc analysis-- 12_5_19_gstGFP_rpS3Hhg4_Xrp1RNAi_antip62_555.lif - Series026.tif_1.csv", check.names=FALSE)
headers = list(colnames(table))
library(stringr)
name <- str_extract_all(headers, "\\<[^<>]+\\>")[[1]]
name <- str_extract_all(name, "\\<[^<>]+\\_")
name <- gsub("<|_", "", name)
genotypeNames <- unique(name)
print (genotypeNames)
table = read.csv("whole disc analysis-- 12_5_19_gstGFP_rpS3Hhg4_Xrp1RNAi_antip62_555.lif - Series026.tif_1.csv", check.names=FALSE)
headers = list(colnames(table))
library(stringr)
#Extract all the unique genotype names
name <- str_extract_all(headers, "\\<[^<>]+\\>")[[1]]
name <- str_extract_all(name, "\\<[^<>]+\\_")
name <- gsub("<|_", "", name)
genotypeNames <- unique(name)
#Check for the number of genotypes
baseString <- "Genotype"
count <- 1
breakLoop <- FALSE
while (breakLoop == FALSE){
for (i in headers){
breakLoop <- TRUE
breaker <- FALSE
queryString <- paste(baseString, toString(count), sep="_")
count <- count + 1
isGenotypeNum <- grepl(queryString, i, fixed = TRUE)
for (z in isGenotypeNum){ if (z == TRUE){ breaker = TRUE } }
if (breaker == TRUE){breakLoop <- FALSE}
}
}
count <- count - 2
#Get only the columns that are not genotype specific
staticVals <- table[ , !grepl( "Genotype" , names( table) ) ]
#Loop through, get all the columns corresponding to one genotype, and store them in an array
chal <- 1
genotypeNames <- c()
while(chal <= count){
queryString1 <- paste(baseString, toString(chal), sep="_")
queryString2 <- paste(baseString, toString(chal), sep=":")
queryString <- paste(queryString1, queryString2, sep="|")
genotypeVals <- table[ , grepl( queryString , names( table) ) ]
genotypeVals <- cbind(staticVals, genotypeVals)
name <- str_extract_all(headers, "\\<[^<>]+\\>")[[1]]
name <- str_extract_all(name, "\\<[^<>]+\\_")[[1]]
name <- gsub("<|_", "", name)
genotypeNames <- c(genotypeName, name)
headers <- colnames(genotypeVals)
headers <- gsub(queryString1, "", headers, ignore.case = FALSE, fixed = TRUE)
headers <- gsub("<[^>]+>", "", headers)
headers <- gsub(" ", ".", headers)
headers <- gsub("#", "X.", headers)
print (headers)
chal <- chal+1
}
print (genotypeNames)
table = read.csv("whole disc analysis-- 12_5_19_gstGFP_rpS3Hhg4_Xrp1RNAi_antip62_555.lif - Series026.tif_1.csv", check.names=FALSE)
headers = list(colnames(table))
library(stringr)
#Extract all the unique genotype names
name <- str_extract_all(headers, "\\<[^<>]+\\>")[[1]]
name <- str_extract_all(name, "\\<[^<>]+\\_")
name <- gsub("<|_", "", name)
genotypeNames <- unique(name)
#Check for the number of genotypes
baseString <- "Genotype"
count <- 1
breakLoop <- FALSE
while (breakLoop == FALSE){
for (i in headers){
breakLoop <- TRUE
breaker <- FALSE
queryString <- paste(baseString, toString(count), sep="_")
count <- count + 1
isGenotypeNum <- grepl(queryString, i, fixed = TRUE)
for (z in isGenotypeNum){ if (z == TRUE){ breaker = TRUE } }
if (breaker == TRUE){breakLoop <- FALSE}
}
}
count <- count - 2
#Get only the columns that are not genotype specific
staticVals <- table[ , !grepl( "Genotype" , names( table) ) ]
#Loop through, get all the columns corresponding to one genotype, and store them in an array
chal <- 1
genotypeNames <- c()
while(chal <= count){
queryString1 <- paste(baseString, toString(chal), sep="_")
queryString2 <- paste(baseString, toString(chal), sep=":")
queryString <- paste(queryString1, queryString2, sep="|")
genotypeVals <- table[ , grepl( queryString , names( table) ) ]
genotypeVals <- cbind(staticVals, genotypeVals)
headers <- colnames(genotypeVals)
headers <- gsub(queryString1, "", headers, ignore.case = FALSE, fixed = TRUE)
headers <- gsub("<[^>]+>", "", headers)
headers <- gsub(" ", ".", headers)
headers <- gsub("#", "X.", headers)
print (headers)
chal <- chal+1
}
print (genotypeNames)
table = read.csv("whole disc analysis-- 12_5_19_gstGFP_rpS3Hhg4_Xrp1RNAi_antip62_555.lif - Series026.tif_1.csv", check.names=FALSE)
headers = list(colnames(table))
library(stringr)
#Extract all the unique genotype names
name <- str_extract_all(headers, "\\<[^<>]+\\>")[[1]]
name <- str_extract_all(name, "\\<[^<>]+\\_")
name <- gsub("<|_", "", name)
genotypeNames <- unique(name)
#Check for the number of genotypes
baseString <- "Genotype"
count <- 1
breakLoop <- FALSE
while (breakLoop == FALSE){
for (i in headers){
breakLoop <- TRUE
breaker <- FALSE
queryString <- paste(baseString, toString(count), sep="_")
count <- count + 1
isGenotypeNum <- grepl(queryString, i, fixed = TRUE)
for (z in isGenotypeNum){ if (z == TRUE){ breaker = TRUE } }
if (breaker == TRUE){breakLoop <- FALSE}
}
}
count <- count - 2
#Get only the columns that are not genotype specific
staticVals <- table[ , !grepl( "Genotype" , names( table) ) ]
#Loop through, get all the columns corresponding to one genotype, and store them in an array
chal <- 1
genotypeNames <- c()
while(chal <= count){
queryString1 <- paste(baseString, toString(chal), sep="_")
queryString2 <- paste(baseString, toString(chal), sep=":")
queryString <- paste(queryString1, queryString2, sep="|")
genotypeVals <- table[ , grepl( queryString , names( table) ) ]
genotypeVals <- cbind(staticVals, genotypeVals)
headers <- colnames(genotypeVals)
headers <- gsub(queryString1, "", headers, ignore.case = FALSE, fixed = TRUE)
headers <- gsub("<[^>]+>", "", headers)
headers <- gsub(" ", ".", headers)
headers <- gsub("#", "X.", headers)
colnames(genotypeVals) <- headers
chal <- chal+1
}
print (genotypeVals)
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp()
runApp()
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp()
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp()
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp()
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp()
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp()
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp()
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
runApp('C:/Users/MyAgu/OneDrive/Desktop')
shiny::runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
shiny::runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
shiny::runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
runApp('C:/Users/MyAgu/OneDrive/Desktop/Macro Analysis App/Macro_Analysis_App')
